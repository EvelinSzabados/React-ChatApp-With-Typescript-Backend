datasource db {
    provider = "postgresql"
    url = "***"
}

generator client {
    provider = "prisma-client-js"
}

model chats {
    id          Int        @id @default(autoincrement())
    lastUpdated DateTime   @default(now())
    users       users[]    @relation(name : "ChatUsers")
    messages    messages[] 
}

model messages {
    id       Int    @id @default(autoincrement())
    sender   users  @relation(fields: [senderId], references: [id])
    senderId Int
    text     String
    chat     chats? @relation(fields: [chatId], references: [id])
    chatId   Int?
}

model users {
    id                Int      @id @default(autoincrement())
    displayName       String
    email             String   @unique
    password          String
    profilePictureUrl String
    status            statuses @default(value: OFFLINE)
    chats     chats[]     @relation(name: "ChatUsers")
    message  messages[]
    friendships friendShips[] @relation(name: "Friendship")
    requestsSent friendShipRequestSent[]
    requestsRecieved friendShipRequestRecieved[]  
}

model friendShips{
    id Int @id @default(autoincrement())
    users users[] @relation(name: "Friendship")
}

model friendShipRequestSent {
        id Int @id @default(autoincrement())
        senderId Int
        sender users @relation(name: "FriendshipRequestsSentRelation", fields:[senderId], references: [id])
        status friendShipRequestStatus @default(value: PENDING)
}

model friendShipRequestRecieved{
        id Int @id @default(autoincrement())
        recieverId Int
        reciever users @relation(name: "FriendshipRequestsReceivedRelation", fields:[recieverId], references: [id])
        status friendShipRequestStatus @default(value: PENDING)
}

enum friendShipRequestStatus {
        PENDING
        ACCEPTED
        REJECTED
}

enum statuses {
    OFFLINE
    BUSY
    AVAILABLE
}
