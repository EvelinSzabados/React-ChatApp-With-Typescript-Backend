
type Query {
  chats: [Chat!]!
  chat(id: ID!): Chat 
  messages: [Message]
  message(id: ID!): Message
  users: [User!]!
  user(id: ID!): User
  requests: [FriendRequest!]
  relevantFriends: [User!]
  
}

type Mutation{

    newChat(users: [ID!]!): Chat
    deleteChat(id: ID!): Chat
    newMessage(senderId: ID!, chatId: ID!, text: String!): Message
    signup(email: String!, password: String!, displayName: String!): AuthPayload
    login(email: String!, password: String!): AuthPayload
    sendRequest(friendId: ID!): FriendRequest
    acceptRequest(requestId: ID!): FriendShip
    declineRequest(requestId: ID!): String
    deleteFriend(friendId: ID!): User
    setStatus(statusName: Status!): User
    logout: String
    uploadPhoto(photo: String!): String

}

type Subscription{
    newChat: Chat,
    newMessage: Message
    deleteChat: Chat
    sendRequest: FriendRequest
    acceptRequest: FriendShip
    declineRequest: FriendRequest
    deleteFriend: User
    setStatus: User
}

type Chat{
    id: ID!
    lastUpdated: String!
    users: [User!]!
    messages: [Message!]!
}
type Message{
    id: ID!
    sender: User!
    text: String!
}
type User{
    id: ID!
    displayName: String!
    email: String!
    password: String!
    profilePictureUrl: String
    status: Status!
    friends: [FriendShip!]
    friendRequestsSent: [FriendRequest!],
    friendRequestsRecieved: [FriendRequest!]
}

type FriendRequest{
    id: ID!,
    sender: User!
    reciever: User!
}

type FriendShip{
    id: ID!
    users: [User!]!
}

type AuthPayload {
  token: String
  user: User
}

enum Status{
    OFFLINE
    BUSY
    AVAILABLE
}


