
type Query {
  chats: [Chat!]!
  chat(id: ID!): Chat 
  messages: [Message]
  message(id: ID!): Message
  users: [User!]!
  user(id: ID!): User
}

type Mutation{
    newChat(users: [ID!]!, messages: [ID]!): Chat
    deleteChat(id: ID!): String
    newMessage(senderId: ID!, chatId: ID!, text: String!): Message
    signup(email: String!, password: String!, displayName: String!): AuthPayload
    login(email: String!, password: String!): AuthPayload
   
}

type Chat{
    id: ID!
    lastUpdated: String!
    users: [User!]!
    messages: [Message!]!
}
type Message{
    id: ID!
    sender: User!
    text: String!
}
type User{
    id: ID!
    displayName: String!
    email: String!
    password: String!
    profilePictureUrl: String
    status: Status!
    friends: [User!]
    friendshipRequestsSent: [FriendshipRequestSent!]!
    friendshipRequestsReceived: [FriendshipRequestReceived!]!
}

type FriendshipRequestSent {
    id: ID!
    to: User!
    status: FriendshipRequestStatus!
}

type FriendshipRequestReceived {
    id: ID!
    from: User!
    status: FriendshipRequestStatus!
}

enum FriendshipRequestStatus {
    PENDING
    ACCEPTED
    REJECTED
}

type AuthPayload {
  token: String
  user: User
}

type Status{
    id: ID!
    statusName: String!
}


